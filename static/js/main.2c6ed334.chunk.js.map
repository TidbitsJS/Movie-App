{"version":3,"sources":["components/MovieCard.js","components/SearchMovies.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","noMovie","undefined","length","console","log","id","title","poster_path","overview","release_date","vote_average","className","filter","cinema","map","index","key","src","alt","ttile","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8RAuCeA,EArCG,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACdC,GAAU,EAed,YAdaC,IAAVF,GAAwC,IAAjBA,EAAMG,SAC9BF,GAAU,EACVG,QAAQC,IAAI,SACZL,EAAQ,CACN,CACEM,GAAI,GACJC,MAAO,yBACPC,YAAa,wIACbC,SAAU,4DACVC,aAAc,aACdC,aAAc,QAKlB,yBAAKC,UAAU,cACZZ,EAAMa,QAAO,SAAAC,GAAM,OAAIA,EAAON,eAAaO,KAAI,SAACD,EAAQE,GAAT,OAC9C,yBAAKC,IAAKH,EAAOR,GAAIM,UAAU,QAE7B,yBAAKA,UAAU,cACVM,IAAKjB,EAAO,UAAMa,EAAON,aAAb,0DAAgFM,EAAON,aACnGW,IAAML,EAAOM,MAAS,WAC3B,yBAAKR,UAAU,iBACb,wBAAIA,UAAU,eAAeE,EAAOP,OACpC,2BAAG,+BAAO,iDAAP,IAAuCO,EAAOJ,eACjD,2BAAG,+BAAO,2CAAP,IAAiCI,EAAOH,aAAxC,UACH,uBAAGC,UAAU,cAAcE,EAAOL,iBCY/BY,EAvCM,WAAO,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,OAEGF,mBAAS,IAFZ,mBAElBG,EAFkB,KAEVC,EAFU,KAInBC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBAEIC,EAHY,kHAGqGR,EAHrG,iDAMIS,MAAMD,GANV,cAMRE,EANQ,gBAOKA,EAAIC,OAPT,OAORC,EAPQ,OAQdT,EAAUS,EAAKC,SACfhC,QAAQC,IAAI8B,EAAKC,SATH,kDAWdhC,QAAQiC,MAAR,MAXc,0DAAH,sDAgBlB,OACI,yBAAKzB,UAAU,YAAY0B,SAAUX,GACnC,0BAAMf,UAAU,QACd,2BAAOA,UAAU,QAAQ2B,QAAQ,SAAjC,cACA,2BACEC,KAAK,OACLC,KAAK,QACLC,YAAY,uCACZ9B,UAAU,QACV+B,MAAOpB,EACPqB,SAAU,SAAChB,GAAD,OAAOJ,EAASI,EAAEiB,OAAOF,UAErC,4BAAQ/B,UAAU,SAAS4B,KAAK,UAAhC,WAEF,kBAAC,EAAD,CAAWxC,MAAOyB,MCtBXqB,G,6KATX,OACE,yBAAKlC,UAAU,aACZ,wBAAIA,UAAU,SAAd,sBACA,kBAAC,EAAD,W,GALSmC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLjC,QAAQiC,MAAMA,EAAM6B,c","file":"static/js/main.2c6ed334.chunk.js","sourcesContent":["import React from 'react'\n\nconst MovieCard = ({movie}) => {\n  let noMovie = false\n  if(movie === undefined || movie.length === 0) {\n    noMovie = true\n    console.log(\"empty\");\n    movie = [\n      {\n        id: 25,\n        title: 'No such Movie - @ Life',\n        poster_path: 'https://images.unsplash.com/photo-1524985069026-dd778a71c7b4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=751&q=80',\n        overview: 'Database has no record of such thing. Might be in Matrix.',\n        release_date: \"20-20-2020\",\n        vote_average: '10',\n      }\n    ]\n  }\n  return (\n    <div className=\"card--list\">\n      {movie.filter(cinema => cinema.poster_path).map((cinema, index) => (\n        <div key={cinema.id} className=\"card\">\n\n          <img className=\"card--image\"\n               src={noMovie ? `${cinema.poster_path}` : `https://image.tmdb.org/t/p/w185_and_h278_bestv2/${cinema.poster_path}`}\n               alt={(cinema.ttile) + 'Poster'}/>\n          <div className=\"card--content\">\n            <h3 className=\"card--title\">{cinema.title}</h3>\n            <p><small><strong>RELEASE DATE:</strong> {cinema.release_date}</small></p>\n            <p><small><strong>Rating:</strong> {cinema.vote_average} / 10</small></p>\n            <p className=\"card--desc\">{cinema.overview}</p>\n          </div>\n\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default MovieCard\n","import React, { useState } from \"react\"\nimport MovieCard from 'components/MovieCard'\n\nconst SearchMovies = () => {\n  const [query, setQuery] = useState('')\n  const [movies, setMovies] = useState([])\n\n  const searchMovies = async (e) => {\n     e.preventDefault()\n\n     const url = `https://api.themoviedb.org/3/search/movie?api_key=2100e2c736ecb18eeaeb006ede82abde&language=en-US&query=${query}&page=1&include_adult=false`\n\n     try {\n         const res = await fetch(url)\n         const data = await res.json()\n         setMovies(data.results)\n         console.log(data.results);\n     } catch(err) {\n         console.error(err)\n     }\n\n  }\n\n  return (\n      <div className=\"searchBox\" onSubmit={searchMovies}>\n        <form className=\"form\">\n          <label className=\"label\" htmlFor=\"query\">Movie Name</label>\n          <input\n            type=\"text\"\n            name=\"query\"\n            placeholder=\"i.e. The Hobbit : Unexpected Journey\"\n            className=\"input\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n          />\n          <button className=\"button\" type=\"submit\">Search</button>\n        </form>\n        <MovieCard movie={movies}/>\n      </div>\n  )\n}\n\nexport default SearchMovies\n","import React from 'react'\nimport SearchMovies from 'components/SearchMovies'\nimport 'App.css'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n         <h1 className=\"title\">React Movie Search</h1>\n         <SearchMovies />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}